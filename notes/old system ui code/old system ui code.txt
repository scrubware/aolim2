/*
// DRAW SECTION

// Create our Parent Frame
masterFrame = new Frame(window_width,window_height,0)
masterFrame.elementDirection = horizontal
masterFrame.margin = [10, 10]
masterFrame.drawSelf = function() {}
masterFrame.movable = false
masterFrame.displacing = false

	// Create our Left Frame
	leftFrameWidth = 350
	leftFrame = new Frame(leftFrameWidth,window_height); masterFrame.addElement(leftFrame)
	leftFrame.margin = [0,0]
	leftFrame.drawSelf = function() {}

		// Topic Browser
		topicBrowser = new Frame(infinity,400,5); leftFrame.addElement(topicBrowser)
		
			flip_next_layout(topicBrowser,false)
			topicBrowser.addElement(new TextElement("aolim2   //   topic browser"))
		
			flip_next_layout(topicBrowser,true)
			scrubwareText = new TextElement("[c_white][fa_right][rainbow][wave]scrubware"); topicBrowser.addElement(scrubwareText,5)
			scrubwareText.alpha = 0
			with scrubwareText {
				move = function(x,y) {
					if parentFrame.frameAnchor[x2_] < 320 {
						alpha = max(alpha - 0.08,0)
					} else {
						alpha = min(alpha + 0.08,1)
					}
					
					scribbleText.blend(c_white,alpha)
					
					return [parentFrame.frameAnchor[x2_] * 0.95, y]
				}
			}
		
			topicBrowser.addElement(new Divider(),4)
			
			function Channel(inputChannelName) : Interactable() constructor {
				
				name = inputChannelName
				timeSinceMessage = "10m ago"
				
				channelColor = c_black
				timeColor = c_gray
				
				frame = new Frame(infinity,30,1)
				frame.margin = [5,0]
				frame.elementDirection = horizontal
				frame.drawSelf = function() {}
				
				notifications = new NotificationCircle(); frame.addElement(notifications)
				channelText = new TextElement(""); frame.addElement(channelText)
				timeText = new TextElement(""); frame.addElement(timeText)
				
				with notifications {
					move = function(x,y) {
						return [x, y + parentFrame.paddedHeight / 2 - size / 2]
					}	
				}
				with channelText {
					move = function(x,y) {
						return [x, y + parentFrame.paddedHeight / 2]
					}
				}
				with timeText {
					move = function(x,y) {
						return [parentFrame.frameAnchor[x2_], y + parentFrame.paddedHeight / 2]
					}	
				}
				
			
				static draw = function(x,y) {
					
					timeText.text = "[msdf_roboto][scale,1.3][fa_middle][fa_right]" + timeSinceMessage
					timeText.color = timeColor
					
					var _delete_pos =  floor((frame.paddedWidth - 30) / 12.5)
					channelText.text = "[msdf_roboto][scale,1.6][fa_middle]" + string_delete(name,_delete_pos,10000)
					channelText.color = channelColor
					
					return [x,y]
				}
				static addToFrame = function(inputFrame,inputPadding = inputFrame.elementPadding) {
					inputFrame.addElement(self,0)
					inputFrame.addElement(frame,inputPadding)
				}
				
				static addNotification = function(inputUser = noone, inputChannel = noone) {
					notifications.addNotification(inputUser,inputChannel)
				}
				
			}
			
			phillyTestChannel = new Channel("philly cheesesteaks")
			phillyTestChannel.addToFrame(topicBrowser,4)
			
			generalChannel = new Channel("general")
			generalChannel.addToFrame(topicBrowser,4)
			
			generalChannel.addNotification(34,99)
			generalChannel.addNotification(34,99)


		// Resize Dragger
		leftFrameDragger = new Dragger(5,30); leftFrame.addElement(leftFrameDragger)
		leftFrameDragger.step = function() {
			topicBrowser.idealHeight = leftFrameDragger.run(topicBrowser.idealHeight)
		}

		// Extra Browser
		extraBrowser = new Frame(infinity,infinity,5); leftFrame.addElement(extraBrowser)
		extraBrowser.margin = [0,0]
		extraBrowser.elementDirection = horizontal
		
			serverListWidth = 55

			serverList = new Frame(serverListWidth,infinity,0); extraBrowser.addElement(serverList)
			serverList.drawSelf = function() {}
			
				iconTest = new Icon(infinity,c_black,5,spr_boif,3,0.9); serverList.addElement(iconTest); serverList.addElement(iconTest); serverList.addElement(iconTest)
				iconTest.outline = false

			divider = new Divider(); extraBrowser.addElement(divider,0)
			
			userList = new Frame(infinity,infinity,0); extraBrowser.addElement(userList)
			userList.drawSelf = function() {}
			
				memberListTitle = new TextElement("member list   //   [[server name]"); userList.addElement(memberListTitle,5)
			
				userList.addElement(new Divider())
		
	betweenFrameDragger = new Dragger(5,80); masterFrame.addElement(betweenFrameDragger)
	betweenFrameDragger.step = function() {
		leftFrame.idealWidth = betweenFrameDragger.run(leftFrame.idealWidth)	
	}
	
	rightFrame = new Frame(infinity,infinity,0); masterFrame.addElement(rightFrame)
	rightFrame.drawSelf = function() {}
	rightFrame.margin = [0,0]
	rightFrame.elementDirection = horizontal
	
	function ChatWindow(inputColor = c_black) constructor {
	
		color = inputColor
	
		frame = new Frame(infinity,infinity,5)
		frame.margin = [0, 0]
		
			topFrame = new Frame(infinity,30); frame.addElement(topFrame,0)
			topFrame.drawSelf = function() {}
			topFrame.margin = [0, 0]
			topFrame.elementDirection = horizontal
		
				colorFrame = new ColorFrame(30,infinity,color); topFrame.addElement(colorFrame)
				topFrame.addElement(new Padding(-15,5))
				
				
				titleText = new TextElement("  topic: [[topic]"); topFrame.addElement(titleText)
		
			frame.addElement(new Divider())
		//	idealWidth = (parentFrame.width - parentFrame.elementPadding * (other.i + 2) ) / other.chatNumber
	}
	
	chatNumber = 1
	chats = array_create(chatNumber)
	
	for (var i = 0; i < chatNumber; i ++) {
		chats[i] = new ChatWindow(); rightFrame.addElement(chats[i].frame)
		
		chats[i].frame.chatIndex = i
		chats[i].frame.chatNumber = chatNumber
		chats[i].colorFrame.color = colorSettings.chatWindow[i]
		
		with chats[i].frame {
			updateIdealSize = function() {
				idealWidth = (parentFrame.width / chatNumber) -  (chatNumber = 1 ? 0 : (parentFrame.elementPadding * 2) + chatNumber )
			}
		}
		
		rightFrame.addElement(new Padding())
	}


chats[0].frame.addElement(stockMessage.frame)
chats[0].frame.addElement(stockMessage2.frame)
chats[0].frame.addElement(stockMessage3.frame)

